#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : require

#include "shared.glsl"


//push constants block
layout( push_constant ) uniform constants{
    ResHandle add;
    ResHandle dst;
    ResHandle pad0[2];
    ivec2 add_offset;
    ivec2 dst_offset;
    uvec2 extent;
    uvec2 pad1;
} Push;

layout(set = 1, binding = 0, rgba32f) uniform image2D global_images_2d_f32[];
layout(set = 1, binding = 0, rgba8) uniform image2D global_images_2d_u8[];

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;


void main_f32(){

  if (!is_valid(Push.add) || !is_valid(Push.dst)){
    return;
  }

  ivec2 thread_id = ivec2(gl_GlobalInvocationID.xy);
  if (thread_id.x >= Push.extent.x || thread_id.y >= Push.extent.y){
    return;
  }

  //TODO check if offset is within image

  //load both values
  vec4 add_val = imageLoad(
      global_images_2d_f32[get_index(Push.add)],
      thread_id
  );

  vec4 dst_val = imageLoad(
      global_images_2d_f32[get_index(Push.dst)],
      thread_id
  );

  vec4 mixed = mix(dst_val, add_val, add_val.w);

  imageStore(
      global_images_2d_f32[get_index(Push.dst)],
      thread_id,
      mixed
    );
}


void main_u8(){

  if (!is_valid(Push.add) || !is_valid(Push.dst)){
    return;
  }

  ivec2 thread_id = ivec2(gl_GlobalInvocationID.xy);
  if (thread_id.x >= Push.extent.x || thread_id.y >= Push.extent.y){
    return;
  }

  //TODO check if offset is within image

  //load both values
  vec4 add_val = imageLoad(
      global_images_2d_u8[get_index(Push.add)],
      thread_id
  );

  vec4 dst_val = imageLoad(
      global_images_2d_u8[get_index(Push.dst)],
      thread_id
  );

  vec4 mixed = mix(dst_val, add_val, add_val.w);

  imageStore(
      global_images_2d_u8[get_index(Push.dst)],
      thread_id,
      mixed
    );
}
