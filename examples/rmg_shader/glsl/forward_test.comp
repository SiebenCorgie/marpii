#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : require

#include "shared.glsl"


//push constants block
layout( push_constant ) uniform constants{
  ResHandle buf;
  ResHandle target_img;
  uint width;
  uint height;
  uint buffer_size;
  uint pad;
} Push;

layout(set = 0, binding = 0) buffer SimObjects{
  SimObject objects[];
} global_buffers_objects[];
layout(set = 1, binding = 0, rgba32f) uniform writeonly image2D global_images_2d[];
layout(set = 2, binding = 0) uniform sampler2D global_textures[];
layout(set = 3, binding = 0) uniform sampler samplers[];


uvec2 sample_location(uint invoc){
  uint line = invoc / Push.width;
  uint collumn = invoc % Push.width;
  return uvec2(line, collumn);
}

layout (local_size_x = 64) in;
void main(){


  uint invoc_idx = gl_GlobalInvocationID.x;
  uvec2 sample_location = sample_location(invoc_idx);

  SimObject src;
  if (invoc_idx < Push.buffer_size){
    src = global_buffers_objects[nonuniformEXT(get_index(Push.buf))].objects[invoc_idx];
  }else{
    src = SimObject(vec4(0.0), vec4(0.0));
  }


  imageStore(
             global_images_2d[0],
             ivec2(sample_location),
             vec4(vec2(sample_location) / 1024, 0.0, 1.0)
             );
}
