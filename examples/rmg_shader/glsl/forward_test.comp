#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : require

#include "shared.glsl"


//push constants block
layout( push_constant ) uniform constants{
  ResHandle buf;
  ResHandle target_img;
  uint width;
  uint height;
  uint buffer_size;
  uvec3 pad;
} Push;

layout(set = 0, binding = 0) buffer SimObjects{
  SimObject objects[];
} global_buffers_objects[];
layout(set = 1, binding = 0) uniform writeonly image2D global_images_2d[];


layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main(){


  uvec2 invoc_idx = gl_GlobalInvocationID.xy;

  /*
  SimObject src;
  if (invoc_idx < Push.buffer_size){
    src = global_buffers_objects[nonuniformEXT(get_index(Push.buf))].objects[invoc_idx];
  }else{
    src = SimObject(vec4(0.0), vec4(0.0));
  }
*/


  imageStore(
             global_images_2d[get_index(Push.target_img)],
             ivec2(invoc_idx),
             vec4(vec2(invoc_idx) / vec2(Push.width, Push.height), 0.0, 1.0)
             //vec4(1.0)
             );

}
