#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : require

#include "shared.glsl"

#define BOUNDS 20.0f

//push constants block
layout( push_constant ) uniform constants{
    ResHandle sim;
    uint is_init;
    uint buf_size;
    uint pad;
} Push;

layout(set = 0, binding = 0) buffer SimObjects{
    SimObject objects[];
} global_buffers_objects[];
layout(set = 1, binding = 0, rgba8) uniform image2D global_images_2d[];
layout(set = 2, binding = 0) uniform sampler2D global_textures[];
layout(set = 3, binding = 0) uniform sampler samplers[];


//src: https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main(){
  uint widx = gl_GlobalInvocationID.x;

  if (widx >= Push.buf_size){
      return;
  }

  SimObject src;
  if (Push.is_init > 0){
    src = global_buffers_objects[nonuniformEXT(get_index(Push.sim))].objects[widx];
  }else{

    vec4 rand = vec4(
                     rand(vec2(uvec2(widx, widx))),
                     rand(vec2(uvec2(widx+1, widx+1))),
                     rand(vec2(uvec2(widx+1, widx+1))),
                     rand(vec2(uvec2(widx+1, widx+1)))
                     );

    //Init to some random location and velocity
    src = SimObject(
                    rand.xyzw,
                    rand.wzyx
                    );
  }

  //"simulation step"
  src.location.xyz += src.velocity.xyz;

  //flip velocity if we exceed the bounds
  if (abs(src.location.x) > BOUNDS){
    src.velocity.x *= -1.0;
  }
  if (abs(src.location.y) > BOUNDS){
    src.velocity.y *= -1.0;
  }
  if (abs(src.location.z) > BOUNDS){
    src.velocity.z *= -1.0;
  }

  global_buffers_objects[nonuniformEXT(get_index(Push.sim))].objects[widx] = src;
}
