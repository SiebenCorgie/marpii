#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : require

#include "shared.glsl"

#define BOUNDS 20.0f

//push constants block
layout( push_constant ) uniform constants{
    float radius;
    float opening;
    vec2 offset;
} Push;

layout(set = 0, binding = 0, rgba32f) uniform writeonly image2D target_image;

// Snacked from: https://www.shadertoy.com/view/3tGXRc under
// The MIT License
// Copyright - 2021 Inigo Quilez
vec3 sdgPie( in vec2 p, in vec2 c, in float r )
{
    float s = sign(p.x); p.x = abs(p.x);

    float l = length(p);
    float n = l - r;
    vec2  q = p - c*clamp(dot(p,c),0.0,r);
    float m = length(q)* sign(c.y*p.x-c.x*p.y);

    vec3  res = (n>m) ? vec3(n,p/l) : vec3(m,q/m);
    return vec3(res.x,s*res.y,res.z);
}

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main(){
  ivec2 coord_px = ivec2(gl_GlobalInvocationID.xy);
  vec2 coord = vec2(coord_px);
  coord += -Push.offset;

  vec2 c = vec2(sin(Push.opening), cos(Push.opening));
  vec3 res = sdgPie(coord, c, Push.radius);

  vec2 nrm = vec2(abs(res.y), abs(res.z));

  vec3 color = vec3(0.0, nrm.x, nrm.y);
  if (res.x < 0.0){
      color = vec3(nrm.x, nrm.y, 0.0);
  }

  imageStore(target_image, coord_px, vec4(color, 1.0));
}
